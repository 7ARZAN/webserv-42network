!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!HTML	C,stylesheet	/stylesheets/
!_TAG_KIND_DESCRIPTION!HTML	I,id	/identifiers/
!_TAG_KIND_DESCRIPTION!HTML	J,script	/scripts/
!_TAG_KIND_DESCRIPTION!HTML	a,anchor	/named anchors/
!_TAG_KIND_DESCRIPTION!HTML	c,class	/classes/
!_TAG_KIND_DESCRIPTION!HTML	h,heading1	/H1 headings/
!_TAG_KIND_DESCRIPTION!HTML	i,heading2	/H2 headings/
!_TAG_KIND_DESCRIPTION!HTML	j,heading3	/H3 headings/
!_TAG_KIND_DESCRIPTION!HTML	t,title	/titles/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!HTML	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lmongol/Projects/wibsirv/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!HTML!class	attribute	/assigned as attributes/
!_TAG_ROLE_DESCRIPTION!HTML!script	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!HTML!stylesheet	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
$(LIBCONFPP)	Makefile	/^$(LIBCONFPP):$/;"	t
$(NAME)	Makefile	/^$(NAME): $(OBJ) $(LIBCONFPP) $(INCLUDES)$/;"	t
$(NAME)	lib/libconfpp/Makefile	/^$(NAME): $(OBJ) $/;"	t
BLUE	includes/log.hpp	/^#define BLUE /;"	d
BODY_READ	includes/connection.hpp	/^	BODY_READ$/;"	e	enum:ws_status
BUFFER_SIZE	tests/nc.c	/^#define BUFFER_SIZE /;"	d	file:
CC	Makefile	/^CC = g++$/;"	m
CC	lib/libconfpp/Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -Wformat=2 -flto -ffast-math -pedantic -ggdb$/;"	m
CFLAGS	lib/libconfpp/Makefile	/^CFLAGS = -Wall -Wextra -Werror -Wformat=2 -flto -ffast-math -pedantic -O3 $/;"	m
CONNECTION_HPP	includes/connection.hpp	/^#define CONNECTION_HPP$/;"	d
CONN_TIMEOUT	includes/connection.hpp	/^#define CONN_TIMEOUT /;"	d
DEBUG	includes/log.hpp	/^	DEBUG,$/;"	e	enum:LOG_LEVEL
DEFAULT	includes/log.hpp	/^#define DEFAULT /;"	d
DELETE	src/DELETEmethod.cpp	/^void	Response::DELETE(){$/;"	f	class:Response	typeref:typename:void
ERROR	includes/log.hpp	/^	ERROR,$/;"	e	enum:LOG_LEVEL
EVENT_TIMEOUT	includes/connection.hpp	/^#define EVENT_TIMEOUT /;"	d
FUNCDEFS_H	lib/libconfpp/includes/funcdefs.h	/^#define FUNCDEFS_H$/;"	d
FileReader	src/Response.cpp	/^bool	Response::FileReader(const std::string &path){$/;"	f	class:Response	typeref:typename:bool
GET	src/GETmethod.cpp	/^void	Response::GET(){$/;"	f	class:Response	typeref:typename:void
HTTP_CODES	includes/webserver.hpp	/^#define HTTP_CODES	/;"	d
HTTP_MSG	includes/webserver.hpp	/^#define HTTP_MSG	/;"	d
INCLUDES	Makefile	/^INCLUDES = lib\/libconfpp\/includes$/;"	m
INFO	includes/log.hpp	/^	INFO,$/;"	e	enum:LOG_LEVEL
LIBCONFPP	Makefile	/^LIBCONFPP = lib\/libconfpp\/libconfpp.a$/;"	m
LIBCONFPP_h	lib/libconfpp/includes/libconfpp.h	/^#define LIBCONFPP_h$/;"	d
LOG_HPP	includes/log.hpp	/^#define LOG_HPP$/;"	d
LOG_LEVEL	includes/log.hpp	/^typedef enum LOG_LEVEL{$/;"	g
LOG_LEVEL	includes/log.hpp	/^}LOG_LEVEL;$/;"	t	typeref:enum:LOG_LEVEL
MIME	includes/webserver.hpp	/^#define MIME	/;"	d
MULTIPART_HPP	includes/multipart.hpp	/^#define MULTIPART_HPP$/;"	d
NAME	lib/libconfpp/Makefile	/^NAME = libconfpp.a$/;"	m
NONE	includes/log.hpp	/^	NONE,$/;"	e	enum:LOG_LEVEL
OBJ	Makefile	/^OBJ = build\/main.o build\/connection.o build\/RequestParsing.o build\/log.o build\/monitor.o \\$/;"	m
OBJ	lib/libconfpp/Makefile	/^OBJ = build\/parse.o build\/common.o build\/config.o build\/search.o$/;"	m
PENDING	includes/connection.hpp	/^	PENDING,$/;"	e	enum:ws_status
POST	src/POSTmethod.cpp	/^void	Response::POST(){$/;"	f	class:Response	typeref:typename:void
POSTFILE	src/POSTmethod.cpp	/^void	Response::POSTFILE(std::string boundary){$/;"	f	class:Response	typeref:typename:void
Please fill in the file-upload form below	tests/upload.html	/^	<h2>Please fill in the file-upload form below<\/h2>$/;"	i
READING_BODY	includes/connection.hpp	/^	READING_BODY,$/;"	e	enum:ws_status
READY	includes/connection.hpp	/^	READY,$/;"	e	enum:ws_status
RED	includes/log.hpp	/^#define RED /;"	d
REQUESTPARSING_HPP	includes/RequestParsing.hpp	/^# define REQUESTPARSING_HPP$/;"	d
RESPONSE_HPP	includes/Response.hpp	/^# define RESPONSE_HPP$/;"	d
Redirect	src/Response.cpp	/^bool	Response::Redirect(const std::string &uri, bool isPermanent){$/;"	f	class:Response	typeref:typename:bool
Request	includes/RequestParsing.hpp	/^class	Request$/;"	c
Request	src/RequestParsing.cpp	/^Request::Request(ws_delivery *request, ws_delivery *response, ws_config_table *table){$/;"	f	class:Request
Response	includes/Response.hpp	/^class	Response$/;"	c
Response	src/Response.cpp	/^Response::Response(Request *req){$/;"	f	class:Response
Response	src/Response.cpp	/^Response::Response(int status_code){$/;"	f	class:Response
SRC	Makefile	/^SRC = src\/main.cpp src\/connection.cpp src\/RequestParsing.cpp src\/log.cpp src\/monitor.cpp \\$/;"	m
STAT_FAIL	includes/Response.hpp	/^# define STAT_FAIL /;"	d
STAT_SUCCESS	includes/Response.hpp	/^# define STAT_SUCCESS /;"	d
TYPE	includes/webserver.hpp	/^#define TYPE /;"	d
WARN	includes/log.hpp	/^	WARN,$/;"	e	enum:LOG_LEVEL
WEBSERVER_HPP	includes/webserver.hpp	/^#define WEBSERVER_HPP$/;"	d
YELLOW	includes/log.hpp	/^#define YELLOW /;"	d
_Body	includes/RequestParsing.hpp	/^		std::string	_Body;$/;"	m	class:Request	typeref:typename:std::string
_Body	includes/Response.hpp	/^		std::string	_Body;$/;"	m	class:Response	typeref:typename:std::string
_GenerateHEAD	src/Response.cpp	/^void	Response::_GenerateHEAD(){$/;"	f	class:Response	typeref:typename:void
_GetFileExtension	src/Response.cpp	/^std::string	Response::_GetFileExtension(const std::string &path){$/;"	f	class:Response	typeref:typename:std::string
_GetPacketDate	src/Response.cpp	/^std::string	Response::_GetPacketDate(){$/;"	f	class:Response	typeref:typename:std::string
_HEAD	includes/Response.hpp	/^		std::string	_HEAD;$/;"	m	class:Response	typeref:typename:std::string
_Metadata	includes/RequestParsing.hpp	/^		std::map<std::string, std::string>	_Metadata;$/;"	m	class:Request	typeref:typename:std::map<std::string,std::string>
_Metadata	includes/Response.hpp	/^		std::map<std::string, std::string>	_Metadata;$/;"	m	class:Response	typeref:typename:std::map<std::string,std::string>
_Method	includes/RequestParsing.hpp	/^		std::string	_Method;$/;"	m	class:Request	typeref:typename:std::string
_RequestPacket	includes/Response.hpp	/^		Request		*_RequestPacket;$/;"	m	class:Response	typeref:typename:Request *
_ResponsePacket	includes/Response.hpp	/^		std::string	_ResponsePacket;$/;"	m	class:Response	typeref:typename:std::string
_Uri	includes/RequestParsing.hpp	/^		std::string	_Uri;$/;"	m	class:Request	typeref:typename:std::string
_Version	includes/RequestParsing.hpp	/^		std::string	_Version;$/;"	m	class:Request	typeref:typename:std::string
_cookies	includes/RequestParsing.hpp	/^		std::map<std::string, std::string>	_cookies;$/;"	m	class:Request	typeref:typename:std::map<std::string,std::string>
_statusCode	includes/Response.hpp	/^		std::string	_statusCode;$/;"	m	class:Response	typeref:typename:std::string
accept_connections	src/connection.cpp	/^void ws_connections::accept_connections(){$/;"	f	class:ws_connections	typeref:typename:void
accepting	notes.md	/^## accepting$/;"	s	chapter:binding the socket
all	Makefile	/^all: build $(NAME)$/;"	t
all	lib/libconfpp/Makefile	/^all: build $(NAME)$/;"	t
attr	includes/multipart.hpp	/^	std::pair<std::string, std::string>	attr;$/;"	m	struct:data_chunk	typeref:typename:std::pair<std::string,std::string>
binding the socket	notes.md	/^# binding the socket$/;"	c
boundary	includes/multipart.hpp	/^		std::string boundary;$/;"	m	class:multipart	typeref:typename:std::string
buffer	includes/connection.hpp	/^	std::string	buffer;$/;"	m	struct:ws_delivery	typeref:typename:std::string
build	Makefile	/^build:$/;"	t
build	lib/libconfpp/Makefile	/^build:$/;"	t
build/%.o	Makefile	/^build\/%.o: src\/%.cpp$/;"	t
build/%.o	lib/libconfpp/Makefile	/^build\/%.o: src\/%.cpp$/;"	t
cache_http_status	src/main.cpp	/^std::map<int, std::string> cache_http_status(){$/;"	f	typeref:typename:std::map<int,std::string>
cache_mime_types	src/main.cpp	/^std::map<std::string, std::string> cache_mime_types(){$/;"	f	typeref:typename:std::map<std::string,std::string>
chunks	includes/multipart.hpp	/^		std::vector<data_chunk> chunks;$/;"	m	class:multipart	typeref:typename:std::vector<data_chunk>
clean	Makefile	/^clean :$/;"	t
clean	lib/libconfpp/Makefile	/^clean :$/;"	t
cline	lib/libconfpp/src/parse.cpp	/^int cline = 1;$/;"	v	typeref:typename:int
close_connection	src/connection.cpp	/^void ws_connections::close_connection(unsigned int idx, unsigned int port_idx){$/;"	f	class:ws_connections	typeref:typename:void
communication domains	notes.md	/^## communication domains$/;"	s	chapter:it all starts with a socket
config	includes/RequestParsing.hpp	/^		ws_config_table	*config;$/;"	m	class:Request	typeref:typename:ws_config_table *
config	includes/connection.hpp	/^		ws_config		config;$/;"	m	class:ws_connections	typeref:typename:ws_config
conn_fds	includes/connection.hpp	/^	std::vector<struct pollfd>	conn_fds;$/;"	m	struct:ws_port	typeref:typename:std::vector<struct pollfd>
content	includes/multipart.hpp	/^	std::string				content;$/;"	m	struct:data_chunk	typeref:typename:std::string
core	lib/libconfpp/includes/config.h	/^		std::vector<ws_config_table *> core;	\/\/ a vector that holds all the ws_config_tables$/;"	m	class:ws_config	typeref:typename:std::vector<ws_config_table * >
correct_Format	src/RequestParsing.cpp	/^std::string	correct_Format(const std::string &str)$/;"	f	typeref:typename:std::string
creating a socket	notes.md	/^# creating a socket$/;"	c
data_chunk	includes/multipart.hpp	/^typedef struct data_chunk{$/;"	s
data_chunk	includes/multipart.hpp	/^}data_chunk;$/;"	t	typeref:struct:data_chunk
delete_dir	src/DELETEmethod.cpp	/^int delete_dir(std::string filepath) {$/;"	f	typeref:typename:int
delivery	includes/connection.hpp	/^	std::string	delivery;$/;"	m	struct:ws_delivery	typeref:typename:std::string
dirlist	src/main.cpp	/^bool					dirlist = false;$/;"	v	typeref:typename:bool
dirlist	tests/default.conf	/^dirlist = "true"$/;"	k
domains?	notes.md	/^### domains?$/;"	S	section:it all starts with a socket""communication domains
expand_escaped	lib/libconfpp/src/parse.cpp	/^char expand_escaped(char escape_seq){$/;"	f	typeref:typename:char
extract_string	lib/libconfpp/src/parse.cpp	/^std::string extract_string (std::string base_string, std::string delims, int *start){$/;"	f	typeref:typename:std::string
fclean	Makefile	/^fclean : clean$/;"	t
fclean	lib/libconfpp/Makefile	/^fclean : clean$/;"	t
fdd	tests/nc.c	/^int fdd = 0;$/;"	v	typeref:typename:int
fds	tests/nc.c	/^struct pollfd fds[20];$/;"	v	typeref:struct:pollfd[20]
find_and_delete	src/multipart.cpp	/^std::string find_and_delete(std::string &haystack, std::string needle){$/;"	f	typeref:typename:std::string
getBody	src/RequestParsing.cpp	/^std::string	&Request::getBody(){$/;"	f	class:Request	typeref:typename:std::string &
getConfig	src/RequestParsing.cpp	/^ws_config_table	*Request::getConfig(){$/;"	f	class:Request	typeref:typename:ws_config_table *
getCookies	src/RequestParsing.cpp	/^std::map<std::string, std::string>	Request::getCookies() const{$/;"	f	class:Request	typeref:typename:std::map<std::string,std::string>
getMetadata	src/RequestParsing.cpp	/^std::string	Request::getMetadata(const std::string &key) const{$/;"	f	class:Request	typeref:typename:std::string
getMethod	src/RequestParsing.cpp	/^std::string	Request::getMethod() const{$/;"	f	class:Request	typeref:typename:std::string
getRequest	src/Response.cpp	/^Request	*Response::getRequest(){$/;"	f	class:Response	typeref:typename:Request *
getStatusCode	src/Response.cpp	/^int	Response::getStatusCode(){$/;"	f	class:Response	typeref:typename:int
getUri	src/RequestParsing.cpp	/^std::string	Request::getUri() const{$/;"	f	class:Request	typeref:typename:std::string
getVersion	src/RequestParsing.cpp	/^std::string	Request::getVersion() const{$/;"	f	class:Request	typeref:typename:std::string
get_chunks	src/multipart.cpp	/^std::vector<data_chunk> multipart::get_chunks(){$/;"	f	class:multipart	typeref:typename:std::vector<data_chunk>
handleResponse	src/Response.cpp	/^void	Response::handleResponse(){$/;"	f	class:Response	typeref:typename:void
hello	lib/libconfpp/tests/lib.conf	/^hello = okeny?$/;"	k
http_status	src/main.cpp	/^std::map<int, std::string>		http_status;$/;"	v	typeref:typename:std::map<int,std::string>
init_socket	src/monitor.cpp	/^void	init_socket(ws_port &cport, std::string port){$/;"	f	typeref:typename:void
isExist	src/DELETEmethod.cpp	/^bool	isExist(const std::string &fullPath){$/;"	f	typeref:typename:bool
is_dir	src/DELETEmethod.cpp	/^bool is_dir(std::string path){$/;"	f	typeref:typename:bool
it all starts with a socket	notes.md	/^# it all starts with a socket$/;"	c
key	lib/libconfpp/includes/config.h	/^	std::string	key;$/;"	m	struct:ws_config_container	typeref:typename:std::string
last_interaction	includes/connection.hpp	/^	std::vector<time_t>		last_interaction;$/;"	m	struct:ws_port	typeref:typename:std::vector<time_t>
left	includes/connection.hpp	/^	ssize_t		left; $/;"	m	struct:ws_delivery	typeref:typename:ssize_t
list_dir	src/GETmethod.cpp	/^std::string	list_dir(std::string path){$/;"	f	typeref:typename:std::string
listening for incomming connections	notes.md	/^## listening for incomming connections$/;"	s	chapter:binding the socket
log_file	includes/log.hpp	/^		std::ofstream	log_file;$/;"	m	class:ws_log	typeref:typename:std::ofstream
log_level	includes/log.hpp	/^		LOG_LEVEL	log_level;$/;"	m	class:ws_log	typeref:typename:LOG_LEVEL
log_level	tests/default.conf	/^log_level = "ERROR"$/;"	k
log_path	includes/log.hpp	/^		std::string	log_path;$/;"	m	class:ws_log	typeref:typename:std::string
log_path	tests/default.conf	/^log_path = "\/tmp\/webserv.log"$/;"	k
log_to_file	includes/log.hpp	/^		bool		log_to_file;$/;"	m	class:ws_log	typeref:typename:bool
logx	src/main.cpp	/^ws_log					logx;$/;"	v	typeref:typename:ws_log
main	lib/libconfpp/tests/main.cpp	/^int main(int argc, char **argv){$/;"	f	typeref:typename:int
main	src/main.cpp	/^int main(int argc, char **argv){$/;"	f	typeref:typename:int
main	tests/nc.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main_server	tests/default.conf	/^[main_server]$/;"	s
main_socket	includes/connection.hpp	/^	int 				main_socket;			\/\/ main socket fd$/;"	m	struct:ws_port	typeref:typename:int
max_connections	tests/default.conf	/^max_connections = 20 $/;"	k	section:media_server
max_connections	tests/default.conf	/^max_connections = 20$/;"	k	section:main_server
max_connections	tests/default.conf	/^max_connections = 20$/;"	k	section:media_server
media_server	tests/default.conf	/^[media_server]$/;"	s
meme	lib/libconfpp/tests/lib.conf	/^meme = 0x488$/;"	k
meme	lib/libconfpp/tests/lib.conf	/^meme = 0xdeadbeef$/;"	k
mime_types	src/main.cpp	/^std::map<std::string, std::string> 	mime_types;$/;"	v	typeref:typename:std::map<std::string,std::string>
monitor_connections	src/connection.cpp	/^void ws_connections::monitor_connections(){$/;"	f	class:ws_connections	typeref:typename:void
multipart	includes/multipart.hpp	/^		multipart(){};$/;"	f	class:multipart
multipart	includes/multipart.hpp	/^class multipart{$/;"	c
multipart	src/multipart.cpp	/^multipart::multipart(std::string boundary){$/;"	f	class:multipart
name	lib/libconfpp/tests/lib.conf	/^name = "nigger"$/;"	k	section:servera
name	lib/libconfpp/tests/lib.conf	/^name = "zebi"$/;"	k	section:servera
nport	includes/connection.hpp	/^	int				nport;				\/\/ port number$/;"	m	struct:ws_port	typeref:typename:int
ohmysplit	src/RequestParsing.cpp	/^std::vector<std::string> ohmysplit(const std::string &str, const std::string &sep)$/;"	f	typeref:typename:std::vector<std::string>
operator =	lib/libconfpp/src/config.cpp	/^ws_config &ws_config::operator=(ws_config x){$/;"	f	class:ws_config	typeref:typename:ws_config &
operator =	src/connection.cpp	/^ws_connections &ws_connections::operator=(ws_connections &x){$/;"	f	class:ws_connections	typeref:typename:ws_connections &
operator []	lib/libconfpp/src/config.cpp	/^ws_config_table *ws_config::operator[](int index){$/;"	f	class:ws_config	typeref:typename:ws_config_table *
pack_request	src/connection.cpp	/^bool ws_connections::pack_request(ws_delivery *delivery, ws_delivery *response, int nport){$/;"	f	class:ws_connections	typeref:typename:bool
parseCookies	src/RequestParsing.cpp	/^bool	Request::parseCookies(){$/;"	f	class:Request	typeref:typename:bool
parseMetadata	src/RequestParsing.cpp	/^bool	Request::parseMetadata(std::stringstream &header){$/;"	f	class:Request	typeref:typename:bool
parseRequest	src/RequestParsing.cpp	/^bool	Request::parseRequest(){$/;"	f	class:Request	typeref:typename:bool
parse_and_serve	src/connection.cpp	/^void ws_connections::parse_and_serve(ws_delivery *request, ws_delivery *response, int nport){$/;"	f	class:ws_connections	typeref:typename:void
parse_attributes	src/multipart.cpp	/^void multipart::parse_attributes(std::string &chunk){$/;"	f	class:multipart	typeref:typename:void
parse_key_val	lib/libconfpp/src/parse.cpp	/^ws_config_container *parse_key_val(std::string conf, int *start){$/;"	f	typeref:typename:ws_config_container *
parse_mbody	src/multipart.cpp	/^void multipart::parse_mbody(std::string mbody){$/;"	f	class:multipart	typeref:typename:void
parse_propreties	src/multipart.cpp	/^std::map<std::string, std::string> multipart::parse_propreties(std::string &props){$/;"	f	class:multipart	typeref:typename:std::map<std::string,std::string>
parse_string	lib/libconfpp/src/parse.cpp	/^void ws_config::parse_string(std::string conf){$/;"	f	class:ws_config	typeref:typename:void
parse_table	lib/libconfpp/src/parse.cpp	/^ws_config_table *ws_config::parse_table(std::string conf, int *idx){$/;"	f	class:ws_config	typeref:typename:ws_config_table *
port	lib/libconfpp/tests/lib.conf	/^port = 443$/;"	k	section:servera
port	lib/libconfpp/tests/lib.conf	/^port = 6060$/;"	k	section:servera
port	tests/default.conf	/^port = 8082$/;"	k	section:media_server
ports	includes/connection.hpp	/^		std::vector<ws_port>	ports;$/;"	m	class:ws_connections	typeref:typename:std::vector<ws_port>
propreties	includes/multipart.hpp	/^	std::map<std::string, std::string>	propreties;$/;"	m	struct:data_chunk	typeref:typename:std::map<std::string,std::string>
push_cont_back	lib/libconfpp/src/config.cpp	/^void ws_config::push_cont_back(ws_config_container *cont, int idx){$/;"	f	class:ws_config	typeref:typename:void
push_table_back	lib/libconfpp/src/config.cpp	/^void ws_config::push_table_back(ws_config_table *table){$/;"	f	class:ws_config	typeref:typename:void
questions	notes.md	/^# questions$/;"	c
quick history of a connection	notes.md	/^## quick history of a connection$/;"	s	chapter:binding the socket
r	tests/x.py	/^    r = requests.post("http:\/\/localhost:6666", data=cyclic(6000))$/;"	v
re	Makefile	/^re : fclean $(LIBCONFPP) all$/;"	t
re	lib/libconfpp/Makefile	/^re : fclean all$/;"	t
read_file	src/GETmethod.cpp	/^std::string	read_file(std::string filename){$/;"	f	typeref:typename:std::string
render_response	src/Response.cpp	/^std::string Response::render_response(){$/;"	f	class:Response	typeref:typename:std::string
req	includes/connection.hpp	/^	Request		*req;$/;"	m	struct:ws_delivery	typeref:typename:Request *
req_timeout	includes/connection.hpp	/^	time_t				req_timeout;$/;"	m	struct:ws_port	typeref:typename:time_t
req_timeout	tests/default.conf	/^req_timeout = 20000			# in seconds$/;"	k	section:media_server
request	includes/RequestParsing.hpp	/^		ws_delivery	*request;$/;"	m	class:Request	typeref:typename:ws_delivery *
requests	includes/connection.hpp	/^	std::vector<ws_delivery>	requests;$/;"	m	struct:ws_port	typeref:typename:std::vector<ws_delivery>
response	includes/RequestParsing.hpp	/^		ws_delivery	*response;$/;"	m	class:Request	typeref:typename:ws_delivery *
responses	includes/connection.hpp	/^	std::vector<ws_delivery>	responses;$/;"	m	struct:ws_port	typeref:typename:std::vector<ws_delivery>
root_dir	tests/default.conf	/^root_dir = "\/etc"$/;"	k	section:main_server
root_dir	tests/default.conf	/^root_dir = "\/home\/lmongol\/Projects\/wibsirv\/tests"$/;"	k	section:media_server
search_table	lib/libconfpp/src/search.cpp	/^ws_config_table *ws_config::search_table(std::string table_name){$/;"	f	class:ws_config	typeref:typename:ws_config_table *
search_table_port	lib/libconfpp/src/search.cpp	/^ws_config_table *ws_config::search_table_port(int port){$/;"	f	class:ws_config	typeref:typename:ws_config_table *
search_val	lib/libconfpp/src/search.cpp	/^std::string ws_config::search_val(std::string table_name, std::string key){$/;"	f	class:ws_config	typeref:typename:std::string
search_val_table	lib/libconfpp/src/search.cpp	/^std::string search_val_table(ws_config_table *table, std::string key){$/;"	f	typeref:typename:std::string
server	lib/libconfpp/tests/lib.conf	/^server = "102.953.2.4"$/;"	k	section:servera
server	lib/libconfpp/tests/lib.conf	/^server = "ctf.plaid.com"$/;"	k	section:servera
server	lib/libconfpp/tests/lib.conf	/^server = "localhost"$/;"	k	section:servera
server_name	includes/connection.hpp	/^	std::string			server_name;			\/\/ server name <table name>$/;"	m	struct:ws_port	typeref:typename:std::string
servera	lib/libconfpp/tests/lib.conf	/^[servera]$/;"	s
setBody	src/RequestParsing.cpp	/^void	Request::setBody(const std::string &body){$/;"	f	class:Request	typeref:typename:void
setBody	src/Response.cpp	/^bool	Response::setBody(const std::string &body){$/;"	f	class:Response	typeref:typename:bool
setCookies	src/RequestParsing.cpp	/^void	Request::setCookies(const std::string &key, const std::string &value){$/;"	f	class:Request	typeref:typename:void
setMetadata	src/RequestParsing.cpp	/^void	Request::setMetadata(const std::string &key, const std::string &value){$/;"	f	class:Request	typeref:typename:void
setMetadata	src/Response.cpp	/^bool	Response::setMetadata(const std::string &key, const std::string &value){$/;"	f	class:Response	typeref:typename:bool
setMethod	src/RequestParsing.cpp	/^void	Request::setMethod(const std::string &method){$/;"	f	class:Request	typeref:typename:void
setRequest	src/Response.cpp	/^void	Response::setRequest(Request &request){$/;"	f	class:Response	typeref:typename:void
setStatusCode	src/Response.cpp	/^bool	Response::setStatusCode(int code){$/;"	f	class:Response	typeref:typename:bool
setUri	src/RequestParsing.cpp	/^void	Request::setUri(const std::string &uri){$/;"	f	class:Request	typeref:typename:void
setVersion	src/RequestParsing.cpp	/^void	Request::setVersion(const std::string &version){$/;"	f	class:Request	typeref:typename:void
setboundary	src/multipart.cpp	/^void multipart::setboundary(std::string boundary){$/;"	f	class:multipart	typeref:typename:void
setup_socket	src/monitor.cpp	/^ws_port ws_connections::setup_socket(ws_config &config, int table_idx){$/;"	f	class:ws_connections	typeref:typename:ws_port
size	lib/libconfpp/src/config.cpp	/^int ws_config::size(){$/;"	f	class:ws_config	typeref:typename:int
socket types	notes.md	/^## socket types$/;"	s	chapter:it all starts with a socket
socket_listen	src/monitor.cpp	/^void socket_listen(ws_port &cport, ws_config &config, int table_idx){$/;"	f	typeref:typename:void
sockets API review	notes.md	/^## sockets API review$/;"	s	chapter:it all starts with a socket
status	includes/connection.hpp	/^	ws_status	status;$/;"	m	struct:ws_delivery	typeref:typename:ws_status
strip_str	src/multipart.cpp	/^void strip_str(std::string &str, char x){$/;"	f	typeref:typename:void
strschr	lib/libconfpp/src/common.cpp	/^int	strschr(std::string s, int c)$/;"	f	typeref:typename:int
table_name	lib/libconfpp/includes/config.h	/^	std::string	table_name;$/;"	m	struct:ws_config_table	typeref:typename:std::string
tables	lib/libconfpp/includes/config.h	/^	std::vector<ws_config_container *> tables;$/;"	m	struct:ws_config_table	typeref:typename:std::vector<ws_config_container * >
test	Makefile	/^test : re$/;"	t
test	lib/libconfpp/Makefile	/^test : re $/;"	t
upload_dir	tests/default.conf	/^upload_dir = "\/home\/lmongol\/Projects\/wibsirv\/tests\/uploads"$/;"	k	section:media_server
upload_dir	tests/default.conf	/^upload_dir = "\/tmp"$/;"	k	section:main_server
val	lib/libconfpp/includes/config.h	/^	std::string	val;$/;"	m	struct:ws_config_container	typeref:typename:std::string
webserver	README.md	/^# webserver$/;"	c
whoami	lib/libconfpp/tests/lib.conf	/^whoami               =            "call it off"$/;"	k
whoami	lib/libconfpp/tests/lib.conf	/^whoami = "dont fucking call it off"$/;"	k
ws_config	lib/libconfpp/includes/config.h	/^class ws_config {$/;"	c
ws_config	lib/libconfpp/src/config.cpp	/^ws_config::ws_config(){$/;"	f	class:ws_config
ws_config	lib/libconfpp/src/config.cpp	/^ws_config::ws_config(ws_config &x){$/;"	f	class:ws_config
ws_config_H	lib/libconfpp/includes/config.h	/^#define ws_config_H$/;"	d
ws_config_container	lib/libconfpp/includes/config.h	/^typedef struct ws_config_container{$/;"	s
ws_config_container	lib/libconfpp/includes/config.h	/^} ws_config_container;$/;"	t	typeref:struct:ws_config_container
ws_config_table	lib/libconfpp/includes/config.h	/^typedef struct ws_config_table{$/;"	s
ws_config_table	lib/libconfpp/includes/config.h	/^} ws_config_table;$/;"	t	typeref:struct:ws_config_table
ws_connections	includes/connection.hpp	/^		ws_connections(){};$/;"	f	class:ws_connections
ws_connections	includes/connection.hpp	/^class ws_connections{$/;"	c
ws_connections	src/connection.cpp	/^ws_connections::ws_connections(ws_config &config){$/;"	f	class:ws_connections
ws_delivery	includes/connection.hpp	/^typedef struct ws_delivery {$/;"	s
ws_delivery	includes/connection.hpp	/^} ws_delivery;$/;"	t	typeref:struct:ws_delivery
ws_log	includes/log.hpp	/^		ws_log(){};$/;"	f	class:ws_log
ws_log	includes/log.hpp	/^class ws_log{$/;"	c
ws_port	includes/connection.hpp	/^typedef struct ws_port{$/;"	s
ws_port	includes/connection.hpp	/^}ws_port;$/;"	t	typeref:struct:ws_port
ws_status	includes/connection.hpp	/^typedef enum ws_status {$/;"	g
ws_status	includes/connection.hpp	/^} ws_status;$/;"	t	typeref:enum:ws_status
~Request	src/RequestParsing.cpp	/^Request::~Request(){$/;"	f	class:Request
~Response	src/Response.cpp	/^Response::~Response(){$/;"	f	class:Response
~ws_config	lib/libconfpp/src/config.cpp	/^ws_config::~ws_config(){$/;"	f	class:ws_config
